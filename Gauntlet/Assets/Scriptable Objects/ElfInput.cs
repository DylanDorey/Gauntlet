//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scriptable Objects/ElfInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ElfInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ElfInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ElfInput"",
    ""maps"": [
        {
            ""name"": ""Elf"",
            ""id"": ""c50280be-a27a-4b76-9edb-5b2125af6d4b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3a4d8581-5b28-42ec-a8ea-247fbca021aa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""4c09ca97-4c13-4694-b585-a4d786e4e889"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Melee"",
                    ""type"": ""Button"",
                    ""id"": ""87bf57bc-476a-4814-9c17-782aa369baac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use Potion"",
                    ""type"": ""Button"",
                    ""id"": ""543ab62e-a007-4d63-9498-e04812cb418a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4f0b1272-f3a7-46ff-8326-d341a65aa0e2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dc08317f-0b6e-4d69-b7c3-a5b30c5e4682"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""41d815c8-d337-4b9b-874f-56aaba19c0d9"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4d14b215-e241-4177-86a5-1b8c424060e0"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b175934d-8cf4-4561-a042-6752861370da"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""89378861-2440-4f62-9b17-ac34eba68479"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7be17a0-6f4f-4846-a5af-dbab8755f9ac"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a3d75f5-df10-4080-bcfc-b5c75709bbe4"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Melee"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ab36292-13fb-4d65-baac-08d5e11d6a97"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use Potion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Elf
        m_Elf = asset.FindActionMap("Elf", throwIfNotFound: true);
        m_Elf_Move = m_Elf.FindAction("Move", throwIfNotFound: true);
        m_Elf_Shoot = m_Elf.FindAction("Shoot", throwIfNotFound: true);
        m_Elf_Melee = m_Elf.FindAction("Melee", throwIfNotFound: true);
        m_Elf_UsePotion = m_Elf.FindAction("Use Potion", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Elf
    private readonly InputActionMap m_Elf;
    private List<IElfActions> m_ElfActionsCallbackInterfaces = new List<IElfActions>();
    private readonly InputAction m_Elf_Move;
    private readonly InputAction m_Elf_Shoot;
    private readonly InputAction m_Elf_Melee;
    private readonly InputAction m_Elf_UsePotion;
    public struct ElfActions
    {
        private @ElfInput m_Wrapper;
        public ElfActions(@ElfInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Elf_Move;
        public InputAction @Shoot => m_Wrapper.m_Elf_Shoot;
        public InputAction @Melee => m_Wrapper.m_Elf_Melee;
        public InputAction @UsePotion => m_Wrapper.m_Elf_UsePotion;
        public InputActionMap Get() { return m_Wrapper.m_Elf; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ElfActions set) { return set.Get(); }
        public void AddCallbacks(IElfActions instance)
        {
            if (instance == null || m_Wrapper.m_ElfActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ElfActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Melee.started += instance.OnMelee;
            @Melee.performed += instance.OnMelee;
            @Melee.canceled += instance.OnMelee;
            @UsePotion.started += instance.OnUsePotion;
            @UsePotion.performed += instance.OnUsePotion;
            @UsePotion.canceled += instance.OnUsePotion;
        }

        private void UnregisterCallbacks(IElfActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Melee.started -= instance.OnMelee;
            @Melee.performed -= instance.OnMelee;
            @Melee.canceled -= instance.OnMelee;
            @UsePotion.started -= instance.OnUsePotion;
            @UsePotion.performed -= instance.OnUsePotion;
            @UsePotion.canceled -= instance.OnUsePotion;
        }

        public void RemoveCallbacks(IElfActions instance)
        {
            if (m_Wrapper.m_ElfActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IElfActions instance)
        {
            foreach (var item in m_Wrapper.m_ElfActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ElfActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ElfActions @Elf => new ElfActions(this);
    public interface IElfActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnMelee(InputAction.CallbackContext context);
        void OnUsePotion(InputAction.CallbackContext context);
    }
}
